services:
  # PostgresSQL Database Service
  db:
    image: postgres:17.4
    container_name: petconnect_db
    restart: unless-stopped # Restarts if stopped, unless we stop it manually
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Named volume for persistence
    ports:
     - "5432:5432" # Map host port 5432 to container port 5432
    networks:
      - petconnect-network

#   Adminer Service (Graphical Interface for the Database)
  adminer:
    image: adminer
    container_name: petconnect_adminer
    restart: unless-stopped
    ports:
      - "8081:8080" # Map Adminer's internal port 8080 to 8081 on your host machine
    networks:
      - petconnect-network
    depends_on: # needs the DB to be ready
      - db

#  Backend Service (Spring Boot Application)
  backend:
    container_name: petconnect_backend
    # Build the image from the Dockerfile in the 'backend' directory
    build:
      context: .
      dockerfile: backend/Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080" # Map host port 8080 to container port 8080 (Spring Boot default)
    networks:
      - petconnect-network
    depends_on: # needs the DB to be ready
      - db
    # Pass environment variables from the .env file to the Spring Boot container
    # Spring Boot will automatically use these to override application.properties
    environment:
      # Database Connection (matches application.properties placeholders)
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${POSTGRES_DB}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # JWT Secrets (matches application.properties placeholders)
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_SECRET_GENERATOR=${JWT_SECRET_GENERATOR}
      # Key Paths
      - VET_KEY_PATH=/app/keys/vet_private_key.pem
      - VET_KEY_PASSWORD=${VET_KEY_PASSWORD}
      - CLINIC_KEY_PATH=/app/keys/clinic_private_key.pem
      - CLINIC_KEY_PASSWORD=${CLINIC_KEY_PASSWORD}
      # mail credentials
      - SPRING_MAIL_USERNAME=${GMAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${GMAIL_APP_PASSWORD}
      # Image Path - Matches the container path for images
      - APP_EXTERNAL_IMAGES_PATH=/app/images # Matches MvcConfig target if serving uploaded images via container
      - APP_EXTERNAL_KEYS_PATH=/app/keys_public
    volumes:
      # Mount host directories into the container
      # :ro for read-only, :rw for read-write
      - ./keys:/app/keys:ro
      - ./images:/app/images:rw
      - ./keys_public:/app/keys_public:rw

  # SonarQube Service
  sonarqube:
    image: sonarqube:latest
    container_name: petconnect_sonarqube
    restart: unless-stopped
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000" # Port for the SonarQube web interface
    networks:
      - petconnect-network
    depends_on:
      - db # needs the DB to be ready

  # zookeeper Service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: petconnect_zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - petconnect-network

  # kafka Service
  kafka:
    image: confluentinc/cp-kafka:7.9.0
    container_name: petconnect_kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # Listeners: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      # For dev environment single-broker
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - petconnect-network

networks:
  petconnect-network:
    driver: bridge

# Defines the named volume for PostgresSQL data persistence
volumes:
  postgres_data:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local
