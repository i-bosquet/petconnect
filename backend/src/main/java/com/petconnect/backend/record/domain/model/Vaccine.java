package com.petconnect.backend.record.domain.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.*;

import java.util.Objects;

/**
 * Represents the specific details of a vaccine administered to a pet.
 * This entity is tightly coupled with a {@link Record} of type VACCINE.
 * It uses the associated Record's ID as its own primary key (@MapsId).
 *
 * @author ibosquet
 */
@Getter
@Setter
@ToString(exclude = "recordEntity")
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@Table(name = "vaccine")
public class Vaccine {
    /**
     * The primary key, which is also the foreign key referencing the associated Record.
     * Uses the ID generated by the owning Record entity.
     */
    @Id
    private Long id; // Will be populated by the associated Record's ID via @MapsId

    /**
     * The Record of type VACCINE to which these vaccine details belong.
     * This is the owning side of the OneToOne relationship.
     */
    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @MapsId
    @JoinColumn(name = "record_id", foreignKey = @ForeignKey(name = "fk_vaccine_record"))
    private Record recordEntity;

    /**
     * The commercial or common name of the vaccine administered.
     * Cannot be blank.
     */
    @NotBlank(message = "Vaccine name cannot be blank")
    @Size(max = 100, message = "Vaccine name cannot exceed 100 characters")
    @Column(name = "name", nullable = false, length = 100)
    private String name;

    /**
     * The validity period of the vaccine in years.
     * Must be a non-negative integer.
     */
    @NotNull(message = "Vaccine validity cannot be null")
    @Min(value = 0, message = "Validity must be non-negative")
    @Column(name = "validity", nullable = false)
    private Integer validity;

    /**
     * The name of the laboratory or manufacturer that produced the vaccine batch.
     * Cannot be blank.
     */
    @NotBlank(message = "Laboratory name cannot be blank")
    @Size(max = 100, message = "Laboratory name cannot exceed 100 characters")
    @Column(name = "laboratory", length = 100)
    private String laboratory;

    /**
     * The batch number or lot number of the specific vaccine vial used.
     * Cannot be blank. Important for traceability.
     */
    @NotBlank(message = "Batch number cannot be blank")
    @Size(max = 50, message = "Batch number cannot exceed 50 characters")
    @Column(name = "batch_number", nullable = false, length = 50)
    private String batchNumber;

    // --- Custom equals/hashCode based on ID ---

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Vaccine vaccine = (Vaccine) o;
        return id != null && Objects.equals(id, vaccine.id);
    }

    @Override
    public int hashCode() {
        return id != null ? Objects.hash(id) : super.hashCode();
    }

}
