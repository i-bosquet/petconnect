spring.application.name=backend
application.title=PetConnect
application.version=1.0.0
application.author=ibosquet
application.email=ibosquet@uoc.edu
application.description=API documentation for the PetConnect project. Provides endpoints for managing users, pets, medical records, and digital certificates.
# Path to the external image storage directory (relative to where the app runs or absolute)
app.external.images.path=../images

# PostgresSQL Database Connection
spring.datasource.url=jdbc:postgresql://localhost:5432/${POSTGRES_DB}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

# JPA/Hibernate Configuration
# 'create': Automatically create the schema on startup (development). Change to 'validate' or 'none' in production.
spring.jpa.hibernate.ddl-auto=create
# Displays the SQL generated by Hibernate in the console (debugging)
spring.jpa.show-sql=true
# Formats displayed SQL statements to make them more readable
spring.jpa.properties.hibernate.format_sql=true
# Defers datasource initialization until after the schema has been created
spring.jpa.defer-datasource-initialization=true
# Enables initialization of SQL scripts on startup (if any are provided)
spring.sql.init.mode=always

spring.jpa.open-in-view=false

# Includes detailed error messages in the server error responses
server.error.include-message=always

# SpringDoc OpenAPI Configuration
# Path where the JSON/YAML specification will be exposed (default is /v3/api-docs)
springdoc.api-docs.path=/api-docs
# Path to access the Swagger UI interface (default)
springdoc.swagger-ui.path=/swagger-ui.html
# Show request duration in Swagger UI
springdoc.swagger-ui.display-request-duration=true
# Sort operations by HTTP method (alpha is another option)
springdoc.swagger-ui.operations-sorter=method
# Sort tags (usually controllers) alphabetically
springdoc.swagger-ui.tags-sorter=alpha
# Hide Spring Boot Actuator endpoints (if any) from Swagger
springdoc.show-actuator=false

# Debug
logging.level.com.petconnect.backend.user.application.service.impl=DEBUG
logging.level.com.petconnect.backend.pet.application.mapper=DEBUG

# Digital Signatures
app.security.vet.privatekey.path=${VET_KEY_PATH}
app.security.vet.privatekey.password=${VET_KEY_PASSWORD}
app.security.clinic.privatekey.path=${CLINIC_KEY_PATH}
app.security.clinic.privatekey.password=${CLINIC_KEY_PASSWORD}

#  KAFKA CONFIGURATION
# Uses 'kafka:9092,' which is the hostname and internal port defined in docker-compose.yml
spring.kafka.bootstrap-servers=kafka:9092
# Serializer for message keys (using String)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Serializer for message values (using Spring's JsonSerializer - flexible)
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# Default group ID for consumers managed by Spring Boot (listeners).
spring.kafka.consumer.group-id=petconnect-group
# Deserializer for message keys (must match producer)
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Deserializer for message values (using Spring's JsonDeserializer)
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Tells the JsonDeserializer, which packages to trust for deserialization, adding packages where your Event DTOs will reside
spring.kafka.consumer.properties.spring.json.trusted.packages=com.petconnect.backend.pet.application.event,com.petconnect.backend.certificate.application.event
# What to do when no initial offset is found or current offset invalid, 'earliest' processes from the beginning, 'latest' from the end (new messages)
spring.kafka.consumer.auto-offset-reset=earliest

# --- Topic Names ---
kafka.topic.pet-activation-requests=pet-activation-requests
kafka.topic.pet-activated=pet-activated
kafka.topic.certificate-requests=certificate-requests
kafka.topic.certificate-generated=certificate-generated